@import 'variables';

@import 'mixins/bem';
@import 'mixins/media-query';

// Extra small devices (portrait phones, less than 34em)
// If we have included this file, set a variable to tell the rest of the
// framework that we have some responsive settings.
$inuit-responsive-settings: true;

//xs
$bp-xs--min: 0;
$bp-xs--max: 360px;
//small
$bp-sm--min: 375px;
$bp-sm--max: 736px;
//medium
$bp-md--min: 768px;
$bp-md--max: 1023px;
//large
$bp-lg--min: 1024px;
$bp-lg--max: 1200px;
//xlarge
$bp-xl--min: 1280px;
$bp-xl--max: 1980px;

//Existing breakpoints
$breakpoints: ( "palm" "screen and (max-width: 44.9375em)", "lap" "screen and (min-width: 45em) and (max-width: 63.9375em)", "lap-and-up" "screen and (min-width: 45em)", "portable" "screen and (max-width: 63.9375em)", "desk" "screen and (min-width: 64em)", "retina" "screen and (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)" );

//Min breakpoints
$minBreakpoints: ( "xs" "screen and (min-width: #{$bp-xs--min})", "sm" "screen and (min-width: #{$bp-sm--min})", "md" "screen and (min-width: #{$bp-md--min})", "lg" "screen and (min-width: #{$bp-lg--min})", "xl" "screen and (min-width: #{$bp-xl--min})" );

//Max breakpoints
$maxBreakpoints: ( "xs" "screen and (max-width: #{$bp-xs--max})", "sm" "screen and (max-width: #{$bp-sm--max})", "md" "screen and (max-width: #{$bp-md--max})", "lg" "screen and (max-width: #{$bp-lg--max})", "xl" "screen and (max-width: #{$bp-xl--max})" );
$newBreakpoints: ( "xs" "screen and (max-width: #{$bp-xs--max})", "sm" "screen and (min-width: #{$bp-sm--min}) and (max-width: #{$bp-sm--max})", "md" "screen and (min-width: #{$bp-md--min}) and (max-width: #{$bp-md--max})", "lg" "screen and (min-width: #{$bp-lg--min}) and (max-width: #{$bp-lg--max})", "xl" "screen and (min-width: #{$bp-xl--min})" );

//@debug "px-mobile-designs - $minBreakpoints = #{$minBreakpoints}";
@import "inuit-responsive-settings/_settings.responsive.scss";

$breakpoints: join($breakpoints, $newBreakpoints);
//@debug 'px-mobile-designs - $breakpoints = #{$breakpoints}';
@import "inuit-responsive-tools/_tools.responsive.scss";


///// Resonsive Utils
/////
@mixin responsiveUtils($bps:$grid_breakpoints) {
   @content;
  /// Visibility utilities
  .invisible {
    visibility: hidden !important;
  }
  ///Responsive visibility utilities
  @each $bp in map-keys($bps) {
    .hidden-#{$bp}-up {
      @include media-breakpoint-up($bp) {
        display: none !important;
      }
    }
    .hidden-#{$bp}-down {
      @include media-breakpoint-down($bp) {
        display: none !important;
      }
    }
  }
}

@mixin noselect() {
  -webkit-touch-callout: none;
  /* iOS Safari */
  -webkit-user-select  : none;
  /* Chrome/Safari/Opera */
  -khtml-user-select   : none;
  /* Konqueror */
  -moz-user-select     : none;
  /* Firefox */
  -ms-user-select      : none;
  /* Internet Explorer/Edge */
  user-select          : none;
  /* Non-prefixed version, currently
                                 not supported by any browser */
  @content;
}



///
@mixin font-face($font-family, $file-path, $font-weight, $font-style) {
   @font-face{
    font-family: $font-family;
    src        : url('#{$file-path}.eot');
    src        : url('#{$file-path}.eot?#iefix') format('embedded-opentype'), url('#{$file-path}.woff') format('woff'), url('#{$file-path}.ttf') format('truetype'), url('#{$file-path}.svg##{$font-family}') format('svg');
    font-weight: $font-weight;
    font-style : $font-style;
  }
  // Chrome for Windows rendering fix: http://www.adtrak.co.uk/blog/font-face-chrome-rendering/
  @media screen and (-webkit-min-device-pixel-ratio: 0) {
     @font-face{
      font-family: $font-family;
      src        : url('#{$file-path}.svg##{$font-family}') format('svg');
    }
  }
}

///
@mixin font-sizes($fs-map, $fs-breakpoints: $breakpoints) {
   @each $fs-breakpoint, $fs-font-size in $fs-map{
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}

/// Mixin to customize scrollbars
/// Beware, this does not work in all browsers
/// @param {Length} $size - Horizontal scrollbar's height and vertical scrollbar's width
/// @param {Color} $foreground-color - Scrollbar's color
/// @param {Color} $background-color [mix($primary, white, 75%)] - Scrollbar's color
/// @example scss - Scrollbar styling
///   @include scrollbars(.5em, slategray);
@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white, 50%)) {
  ::-webkit-scrollbar {
    width : $size;
    height: $size;
  }

  ::-webkit-scrollbar-thumb {
    background: $foreground-color;
  }

  ::-webkit-scrollbar-track {
    background: $background-color;
  }
  // For Internet Explorer
  body {
    scrollbar-face-color : $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

// Utilities
// -------------------------

/// Centerer mixin to center object on screen.
/// @param {Boolean} $horizontal - Align horizontal
/// @param {Boolean} $vertical - Align vertical
/// @access public
@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top      : 50%;
    left     : 50%;
    transform: translate(-50%, -50%);
  }
  @else if ($horizontal) {
    left     : 50%;
    transform: translate(-50%, 0);
  }
  @else if ($vertical) {
    top      : 50%;
    transform: translate(0, -50%);
  }
}

/// Font size percentage mixin.
/// @param {Number} $sizeValue - The font-size
/// @access public
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + em;
}

/// Clearfix
/// @access public
@mixin clearfix() {
  &:after,
  &:before {
    display: table; // 2
    content: ' '; // 1
  }

  &:after {
    clear: both;
  }
}

/// Colors
/// @example
/// $values: #ff0000, #00ff00, #0000ff;
/// .primary {
///   @include colors($values...);
///}
/// $value-map: (text: #00ff00, background: #0000ff, border: #ff0000);
/// .secondary {
///   @include colors($value-map...);
/// }
@mixin colors($text, $background, $border) {
  color           : $text;
  background-color: $background;
  border          : 1px solid $border;
}

/// Box Shadows
/// @access public
/// @example scss - Using box-shadow
///   @include box-shadow(#000);
@mixin box-shadow($shadows...) {
  -moz-box-shadow   : $shadows;
  -webkit-box-shadow: $shadows;
  box-shadow        : $shadows;
}

/// Linear-gradient
/// @access public
/// @example scss - Using box-shadow
///   @include box-shadow(#000);
@mixin linear-gradient($color-from, $color-to) {
  background-color: $color-from; // Old browsers
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$color-from), color-stop(100%,$color-to)); // Chrome, Safari4+
  background-image: -webkit-linear-gradient(top, $color-from 0%, $color-to 100%); // Chrome10+, Safari5.1+
  background-image: -moz-linear-gradient(top, $color-from 0%, $color-to 100%); // FF3.6+
  background-image: -ms-linear-gradient(top, $color-from 0%, $color-to 100%); // IE10+
  background-image: -o-linear-gradient(top, $color-from 0%, $color-to 100%); // Opera 11.10+
  background-image: linear-gradient(to bottom, $color-from 0%, $color-to 100%); // W3C
  filter:progid:DXImageTransform.Microsoft.gradient( startColorstr=  '#{$color-from}', endColorstr='#{$color-to}', GradientType=0 ); // IE6-9
}

/// Linear-gradient
/// @access public
/// @example scss - Using box-shadow
///   @include box-shadow(#000);
@mixin directional-gradient($color-from, $color-to, $deg: 45deg) {
  background-color: $color-from; // Old browsers
  background-image: -webkit-gradient(linear, left bottom, right top, color-stop(0%,$color-from), color-stop(100%,$color-to)); // Chrome, Safari4+
  background-image: -webkit-linear-gradient($deg, $color-from 0%, $color-to 100%); // Chrome10+, Safari5.1+
  background-image: -moz-linear-gradient($deg, $color-from 0%, $color-to 100%); // FF3.6+
  background-image: -ms-linear-gradient($deg, $color-from 0%, $color-to 100%); // IE10+
  background-image: -o-linear-gradient($deg, $color-from 0%, $color-to 100%); // Opera 11.10+
  background-image: linear-gradient($deg, $color-from 0%, $color-to 100%); // W3C
  filter:progid:DXImageTransform.Microsoft.gradient( startColorstr=  '#{$color-from}', endColorstr='#{$color-to}', GradientType=1 ); // IE6-9
}

/// Transform mixen
/// @access public
/// @param {String} $transform - The transform to apply
@mixin transform($transform...) {
  -webkit-transform: $transform;
  -ms-transform    : $transform;
  transform        : $transform;
}

// Transitions
// --------------------------------------------------

/// transition
/// @access public
/// @example scss - Using box-shadow
///   @include transition(ease, .5s);
@mixin transition($transition...) {
  -webkit-transition: $transition;
  -moz-transition   : $transition;
  transition        : $transition;
}

/// transition-property
/// @access public
/// @example scss - Using box-shadow
///   @include box-shadow(#000);
@mixin transition-property($property...) {
  -webkit-transition-property: $property;
  -moz-transition-property   : $property;
  transition-property        : $property;
}

/// transition-duration
/// @access public
/// @example scss - Using box-shadow
///   @include box-shadow(#000);
@mixin transition-duration($duration...) {
  -webkit-transition-duration: $duration;
  -moz-transition-duration   : $duration;
  transition-duration        : $duration;
}

/// transition-timing-function
/// @access public
/// @example scss - Using box-shadow
///   @include box-shadow(#000);
@mixin transition-timing-function($function...) {
  -webkit-transition-timing-function: $function;
  -moz-transition-timing-function   : $function;
  transition-timing-function        : $function;
}

// Animations
// --------------------------------------------------

/// animation-name
/// @access public
/// @example scss - Using box-shadow
///   @include animation-name('test');
@mixin animation-name($name) {
  -webkit-animation-name: $name;
  -moz-animation-name   : $name;
  animation-name        : $name;
}

/// animation-duration
/// @access public
/// @example scss - Using box-shadow
///   @include box-shadow(#000);
@mixin animation-duration($duration) {
  -webkit-animation-duration: $duration;
  -moz-animation-duration   : $duration;
  animation-duration        : $duration;
}

/// animation-direction
/// @access public
/// @example scss - Using box-shadow
///   @include box-shadow(#000);
@mixin animation-direction($direction) {
  -webkit-animation-direction: $direction;
  -moz-animation-direction   : $direction;
  animation-direction        : $direction;
}
@mixin switch() {
  .switch {
    position       : relative;
    display        : inline-block;
    vertical-align : top;
    box-sizing     : border-box;
    background-clip: padding-box;
    position       : relative;
    overflow       : hidden;
    font-size      : 17px;
    padding        : 0 20px;
    border         : none;
    overflow       : visible;
    width          : 51px;
    height         : 32px;
    z-index        : 0;
    text-align     : left;

    input {
      position      : absolute;
      overflow      : hidden;
      right         : 0;
      top           : 0;
      left          : 0;
      bottom        : 0;
      padding       : 0;
      border        : 0;
      opacity       : 0.001;
      z-index       : 1;
      vertical-align: top;
      outline       : none;
      width         : 100%;
      height        : 100%;
      margin        : 0;
      appearance    : none;
      width         : 51px;
      height        : 44px;
      margin-top    : -6px;
      top           : 0;
      left          : 0;
      transition    : all 0.2s linear;
    }

    @include element ('toggle') {
      background-color          : #ddd;
      position                  : absolute;
      top                       : 0;
      left                      : 0;
      right                     : 0;
      bottom                    : 0;
      border-radius             : 30px;
      transition-property       : all;
      transition-duration       : 0.35s;
      transition-timing-function: ease-out;

      &:before {
        box-sizing                : border-box;
        background-clip           : padding-box;
        position                  : absolute;
        content                   : '';
        border-radius             : 28px;
        height                    : 28px;
        width                     : 28px;
        background-color          : #fff;
        left                      : 2px;
        top                       : 2px;
        transition-property       : all;
        transition-duration       : 0.35s;
        transition-timing-function: cubic-bezier(0.5, 1.6, 0.5, 1);
      }
    }

    input:checked + .toggle {
      background-color: #4cd964;
    }

    input:checked + .toggle:before {
      transform: translateX(18px);
    }

    input:not(:checked) + .toggle:before {
      transform: translateX(0px);
    }

    input:disabled + .toggle {
      opacity       : 0.3;
      cursor        : default;
      pointer-events: none;
    }

    &.table-row {
      float       : right;
      margin-top  : 6px;
      margin-right: 10px;
    }
  }
}
@mixin range($bgColor, $borderColor) {
  .range {
    padding            : 0;
    margin             : 0;
    font               : inherit;
    color              : inherit;
    background         : transparent;
    border             : none;
    line-height        : normal;
    box-sizing         : border-box;
    background-clip    : padding-box;
    vertical-align     : top;
    outline            : none;
    line-height        : 1;
    border-radius      : 4px;
    border             : none;
    height             : 2px;
    border-radius      : 0;
    border-radius      : 3px;
    background-image   : linear-gradient($borderColor, $borderColor);
    background-position: left center;
    background-size    : 100% 2px;
    background-repeat  : no-repeat;
    overflow           : hidden;
    height             : 31px;

    &::-moz-range-track {
      position        : relative;
      border          : none;
      background-color: $borderColor;
      height          : 2px;
      border-radius   : 30px;
      box-shadow      : none;
      top             : 0;
      margin          : 0;
      padding         : 0;
    }

    &::-webkit-slider-thumb {
      cursor          : pointer;
      position        : relative;
      height          : 29px;
      width           : 29px;
      background-color: #fff;
      border          : 1px solid $borderColor;
      border-radius   : 30px;
      box-shadow      : none;
      top             : 0;
      margin          : 0;
      padding         : 0;
    }

    &::-moz-range-thumb {
      cursor          : pointer;
      position        : relative;
      height          : 29px;
      width           : 29px;
      background-color: #fff;
      border          : 1px solid $borderColor;
      border-radius   : 30px;
      box-shadow      : none;
      margin          : 0;
      padding         : 0;
    }

    &::-webkit-slider-thumb:before {
      position        : absolute;
      top             : 13px;
      right           : 0;
      left            : -1024px;
      width           : 1024px;
      height          : 2px;
      background-color: $bgColor;
      content         : '';
      margin          : 0;
      padding         : 0;
    }

    &:disabled {
      opacity       : 0.3;
      cursor        : default;
      pointer-events: none;
    }
  }

}
@mixin aspect-ratio($width, $height) {
  position: relative;

  &:before {
    display    : block;
    content    : '';
    width      : 100%;
    padding-top: ($height / $width) * 100%;
  }

  > .content {
    position: absolute;
    top     : 0;
    left    : 0;
    right   : 0;
    bottom  : 0;
  }
}
